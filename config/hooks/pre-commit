#!/usr/bin/env python3
#
# AUTHOR: GII - Fab Big Data - 08/2017
# This hook checks if you're woriking in a virtualenv. If True, 
# it makes a pep3 freeze  to generate the requirements.txt and adds it 
# to the staging area. The file is therefore committed.    
# To use this hook:
#   * Place this file (DO NOT CHANGE THE NAME: must be pre-commit)
#     in the .git/hooks folder
#   * Make it executable with chmod
#   * Make sure you're working in virtualENV. You'll get an error message otherwise.
#     Why? Because you don't want to make a pip3 freeze a system-wide python installation
#   * You'll find a log file ``log_hook`` in the .git/hook folder and two messages
#     generated by the hook script in the std out (they start with HOOK:)
#   * Use the git option --no-verify if you want to bypass the hook 

from os import getcwd,  system as os_system
from os.path import join as os_join
from time import strftime
import sys

def is_env():
    
    '''This function tests if we're inside a virtualenv, 'cause we don't want to use this 
    hook if we're outside a virtualenv
    '''

    return (hasattr(sys, 'real_prefix') or
            (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix))

def add_requirements():

    """ Add requirements.txt by using pip3 freeze        
    """

    try:
        base_path       = getcwd()
        #print(base_path)

        #Log File for the hook process
        hook_log_file_name  = base_path+'/.git/hooks'+'/hook.log'     
        f_log               = open(hook_log_file_name, 'a')
        f_log.write('\n Starting hook (freeze) at {} \n'.format(strftime("%d/%m/%Y %H:%M:%S")))

        print('[HOOK] pip3 freeze is launched')
        f_log.write('pip3 freeze is launched \n')

        # Action happens here
        # Set the path to the requirements file
        target_file_name = os_join(base_path,'config','requirements.txt')       
        os_system('pip3 freeze > '+target_file_name)
        os_system('git add '+target_file_name)
        
        print('[HOOK] file {} is added'.format(target_file_name))
        f_log.write('file {} is added \n'.format(target_file_name))

    except Exception as e:
        f_log.write('pip3 freeze has failed. Message is {} \n'.format(e))
        raise e

    finally:
        f_log.write('Finishing hook (freeze) at {} \n'.format(strftime("%d/%m/%Y %H:%M:%S"+'\n')))
        f_log.close()

    return 'OK'

if __name__ == "__main__":


    if is_env():
        add_requirements()
    else:
        print('File requirements.txt is not added because you\'re not working in a virtualenv','\n',
            'You can either create one or deactivate this hook (by renaming pre-commit file) ',
            'Use the git option --no-verify if you want to bypass the hook (requirements.txt is not added anyway)' 
            )